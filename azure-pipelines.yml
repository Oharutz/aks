variables:
  commitMessage: $(Build.SourceVersionMessage)
  TF_VAR_location: '$(location)'
  TF_VAR_prefix: '$(prefix)'
  TF_VAR_aks_subnet_id: '$(aks_subnet_id)'
  TF_VAR_aks_vnet_id: '$(aks_vnet_id)'
  TF_VAR_resource_group_name: '$(resource_group_name)'

trigger:
- main

pool:
  name: 'privateAksAgentPool'

jobs:
  - job: ConditionalTrigger
    condition: ne(variables['commitMessage'], '[Skip]')
    steps:
    # Print Vars
    - script: |
        echo "prefix=$(prefix)"
        echo "location=$(location)"
        echo "aks_subnet_id=$(aks_subnet_id)"
        echo "aks_vnet_id=$(aks_vnet_id)"
      displayName: "Print Variables"

    # Install Terraform and kubectl
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip curl apt-transport-https sshpass
        curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform_1.5.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client
      displayName: Install Terraform and kubectl

    # Initialize Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'

    # Apply Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'
        commandOptions: '-auto-approve'

    # Deploy NGINX Ingress Controller via Jumpbox
    - script: |
        sshpass -p "$JUMPBOX_PASSWORD" ssh -o StrictHostKeyChecking=no appusr@$(JUMPBOXIP) << EOF
          # Authenticate with Azure using Managed Identity
          az login --identity

          # Dynamically fetch AKS resource group and cluster name from Terraform outputs
          AKS_RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          AKS_NAME=$(terraform output -raw aks_name)

          # Fetch AKS credentials
          az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_NAME --overwrite-existing

          # Add the Helm repository
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          # Deploy the private NGINX ingress controller
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-basic --create-namespace \
            --set controller.service.annotations.\"service.beta.kubernetes.io/azure-load-balancer-internal\"=\"true\"

          # Validate the deployment
          kubectl get pods -n ingress-basic
          kubectl get svc -n ingress-basic
        EOF
      displayName: "Deploy NGINX Ingress Controller Using Bastion"
      env:
        JUMPBOX_PASSWORD: $(jumpbox-password)
