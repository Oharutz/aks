variables:
  commitMessage: $(Build.SourceVersionMessage)
  TF_VAR_location: '$(location)'
  TF_VAR_prefix: '$(prefix)'
  TF_VAR_aks_subnet_id: '$(aks_subnet_id)'
  TF_VAR_aks_vnet_id: '$(aks_vnet_id)'
  TF_VAR_resource_group_name: '$(resource_group_name)'
  
trigger:
- main

pool:
  name: 'privateAksAgentPool'

jobs:
  - job: ConditionalTrigger
    condition: ne(variables['commitMessage'], '[Skip]')
    steps:
    # Print Vars
    - script: |
        echo "prefix=$(prefix)"
        echo "location=$(location)"
        echo "aks_subnet_id=$(aks_subnet_id)"
        echo "aks_vnet_id=$(aks_vnet_id)"
      displayName: "Print Variables"

    # Install Terraform and kubectl
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip curl apt-transport-https sshpass
        curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform_1.5.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client
      displayName: Install Terraform and kubectl

    # Initialize Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'
        backendServiceArm: 'Azure ARM'
        backendAzureRmResourceGroupName: 'basicAksRg'
        backendAzureRmStorageAccountName: 'tfstateaccount1296'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # Apply Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'Azure ARM'
    - task: TerraformTaskV4@4
      displayName: 'Terraform Output'
      inputs:
        provider: 'azurerm'
        command: 'output'
        environmentServiceNameAzureRM: 'Azure ARM'
        workingDirectory: $(System.DefaultWorkingDirectory)/privateAksAcrJumpbox
    # Deploy NGINX Ingress Controller via Jumpbox
#    - task: AzureKeyVault@2
#      inputs:
#        azureSubscription: 'Azure ARM'
#        KeyVaultName: 'aksKeyVault1296'
#        SecretsFilter: 'ssh-private-key'
#        RunAsPreJob: true
    # Configure SSH Key
    - task: DownloadSecureFile@1
      name: 'id_rsa'
      inputs:
        secureFile: 'id_rsa'
        retryCount: '3'
      displayName: Download Key from Pipeline to Agent

    - script: |
        set -x
        
        RESOURCE_GROUP_NAME=$(resource_group_name)
        AKS_NAME=$(aks_name)
        
        # Install Azure CLI Extensions
        az extension add -n ssh --yes
        az extension add --name bastion --yes

        chmod 600 $(id_rsa.secureFilePath)
        
        # Upload the uploaded deployment script to the Jumpbox
        echo "Uploading deployment script to Jumpbox..."
        scp -o StrictHostKeyChecking=no -i $(id_rsa.secureFilePath) $(System.DefaultWorkingDirectory)/scripts/deploy_nginx.sh appusr@$(JUMPBOXIP):~/deploy_nginx.sh

        # Execute the uploaded script on the Jumpbox
        echo "Executing deployment script on Jumpbox..."
        ssh -o StrictHostKeyChecking=no -i $(id_rsa.secureFilePath) appusr@$(JUMPBOXIP) "bash ~/deploy_nginx.sh $(terraform output -raw resource_group_name) $(terraform output -raw aks_name)"
    displayName: "Deploy NGINX Using Bastion"
  