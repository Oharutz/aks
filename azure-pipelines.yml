variables:
  commitMessage: $(Build.SourceVersionMessage)
  location: 'westus'
  prefix: 'test'
  
trigger:
- main

pool:
  name: 'azUbuntuAgentPool'

jobs:
  - job: ConditionalTrigger
    condition: ne(variables['commitMessage'], '[Skip]')
    steps:
    # Pre: Print Vars
    - script: |
        echo "prefix=$(prefix)"
        echo "location=$(location)"
    # Step 1: Install Terraform
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip
        curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform_1.5.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version
      displayName: Install Terraform & Unzip

    # Step 2: Initialize Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksWithACR'
        backendServiceArm: 'Azure ARM'
        backendAzureRmResourceGroupName: 'basicAksRg'
        backendAzureRmStorageAccountName: 'tfstateaccount1296'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # Step 2: Validate Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksWithACR'


    # Step 3: Plan Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksWithACR'
        commandOptions: '-var location=$(location) -var prefix=$(prefix) -out=tfplan'
        environmentServiceNameAzureRM: 'Azure ARM'

    # Temporary: Check files in current directory
    - script: ls -la
      displayName: Show Current Files
      
    # Step 4: Apply Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksWithACR'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'Azure ARM'

    # Step 5: Output kubeconfig (optional)
    - script: |
        echo "Kubeconfig:"
        terraform output kube_config
      displayName: 'Output Kubeconfig'