variables:
  commitMessage: $(Build.SourceVersionMessage)
  TF_VAR_location: '$(location)'
  TF_VAR_prefix: '$(prefix)'
  TF_VAR_aks_subnet_id: '$(aks_subnet_id)'
  TF_VAR_aks_vnet_id: '$(aks_vnet_id)'
  TF_VAR_resource_group_name: '$(resource_group_name)'

trigger:
- main

pool:
  name: 'privateAksAgentPool'

jobs:
  - job: ConditionalTrigger
    condition: ne(variables['commitMessage'], '[Skip]')
    steps:
    # Print Vars
    - script: |
        echo "prefix=$(prefix)"
        echo "location=$(location)"
        echo "aks_subnet_id=$(aks_subnet_id)"
        echo "aks_vnet_id=$(aks_vnet_id)"
      displayName: "Print Variables"

    # Install Terraform and kubectl
    - script: |
        # Update package list and install prerequisites
        sudo apt-get update && sudo apt-get install -y unzip curl apt-transport-https

        # Install Terraform
        curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform_1.5.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version

        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client
      displayName: Install Terraform and kubectl

    # Initialize Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'
        backendServiceArm: 'Azure ARM'
        backendAzureRmResourceGroupName: 'basicAksRg'
        backendAzureRmStorageAccountName: 'tfstateaccount1296'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # Validate Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'

    # Plan Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'Azure ARM'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'

    # Apply Terraform
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/privateAksAcrJumpbox'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'Azure ARM'

    # Copy private key to the agent
    - task: AzureKeyVault@2
      displayName: Fetch private key from Key Vault
      inputs:
        azureSubscription: 'Azure ARM'
        KeyVaultName: 'aksKeyVault1296'
        SecretsFilter: 'ssh-private-key'
        RunAsPreJob: true

    # Configure SSH Key
    - script: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $(JUMPBOXIP) >> ~/.ssh/known_hosts
        echo "SSH key and known_hosts configured."
      displayName: Configure SSH Key for Agent
      env:
        SSH_PRIVATE_KEY: $(ssh-private-key)

    # Save kubeconfig and transfer to jumpbox
    - script: |
        echo "Copying kubeconfig to jumpbox"
        echo "$(terraform output -raw kube_config_raw)" > kubeconfig
        scp -o StrictHostKeyChecking=no kubeconfig appusr@$(JUMPBOXIP):~/.kube/config
        ssh -o StrictHostKeyChecking=no appusr@$(JUMPBOXIP) 'chmod 600 ~/.kube/config && mkdir -p ~/.kube'
      displayName: "Save kubeconfig and Transfer to Jumpbox"

    # Deploy NGINX Ingress Controller
    - script: |
        ssh -o StrictHostKeyChecking=no appusr@$(JUMPBOXIP) << EOF
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-basic --create-namespace \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true"
        EOF
      displayName: Deploy NGINX Ingress Controller
